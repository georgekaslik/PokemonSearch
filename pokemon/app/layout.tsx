import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

import {
    Card,
    CardContent,
    CardDescription,
    CardFooter,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button"

import React, { Suspense } from 'react';

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Pokemon Browser",
    description: "Generated by create next app",
};


export default function RootLayout({
    children,
  }: Readonly<{
    children: React.ReactNode;
  }>) {
    return (
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          {children}
        </body>
      </html>
    );
};


export async function CreateCard({idNum} : {idNum: number}){
    let idString :string = idNum.toString();
    if (id >= 1 && id < 10){
        idString = `#000${idString}`;
    } else if (id >= 10 && id < 100){
        idString = `#00${idString}`;
    } else if (id >= 100 && id < 1000){
        idString = `#0${idString}`;
    } else {
        idString = `#${idString}`;
    }
    const data = (await fetch(`https://pokeapi.co/api/v2/pokemon/${id.toString()}`))
    const posts = await data.json()
    // console.log(posts);
    const imgUrl :string = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id.toString()}.png`;
    return (
        <Suspense fallback={<div>Loading...</div>}>
        <Card className="flex-1 h-fit m-4 ">
          <CardHeader className="flex items-center justify-center rounded-t-md bg-gray-200">
            <img src={imgUrl} alt="Bulbersor" />
          </CardHeader>
          <CardContent className="p-4">
            <CardTitle>{posts.name}</CardTitle>
            <CardDescription>{idString}</CardDescription>
          </CardContent>
          <CardFooter className="flex items-start justify-start">
            {posts &&
              posts.types.map((item, i) => (
                <Button className="m-1" key={i}>
                  {item.type.name}
                </Button>
              ))}
          </CardFooter>
        </Card>
        </Suspense>
      );
}